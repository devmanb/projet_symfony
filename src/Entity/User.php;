<?php

namespace App\Entity;

use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * @ORM\Entity(repositoryClass="App\Repository\UserRepository")
 * @Vich\Uploadable
 * @UniqueEntity(fields={"email"}, message="There is already an account with this email")
 */

class User implements UserInterface {
	/**
	 * @ORM\Id()
	 * @ORM\GeneratedValue(strategy="UUID")
	 * @ORM\Column(name="id", type="guid")
	 */
	private $id;

	/**
	 * @ORM\Column(type="string", length=180, unique=true)
	 */
	private $email;

	/**
	 * @ORM\Column(type="json")
	 */
	private $roles = [];

	/**
	 * @var string The hashed password
	 * @ORM\Column(type="string")
	 */
	private $password;

	/**
	 * @ORM\Column(type="string", length=25, unique=true)
	 */
	private $username;

	/**
	 * @ORM\Column(type="boolean", nullable=true)
	 */
	private $enabled;

	/**
	 * @ORM\Column(type="string", length=150, nullable=true)
	 */
	private $confirmation_token;

	/**
	 * @ORM\Column(type="datetime", nullable=true)
	 */
	private $password_requested_at;

	/**
	 * @ORM\Column(type="string", length=150, nullable=true)
	 */
	protected $avatar;

	/**
	 * @Vich\UploadableField(mapping="upload_user", fileNameProperty="avatar")
	 * @var File
	 */
	protected $avatarFile;

	/**
	 * @ORM\ManyToOne(targetEntity="App\Entity\Fonction", inversedBy="users")
	 */
	private $fonction;

	public function __construct() {
	}

	public function getId():?string {
		return $this->id;
	}

	public function getEmail():?string {
		return $this->email;
	}

	public function setEmail(string $email):self {
		$this->email = $email;

		return $this;
	}

	/**
	 * A visual identifier that represents this user.
	 *
	 * @see UserInterface
	 */
	public function getUsername():string {
		return (string) $this->username;
	}

	/**
	 * @see UserInterface
	 */
	public function getRoles():array
	{
		$roles = $this->roles;
		// guarantee every user at least has ROLE_USER
		$roles[] = 'ROLE_USER';

		return array_unique($roles);
	}

	public function setRoles(array $roles):self {
		$this->roles = $roles;

		return $this;
	}

	/**
	 * @see UserInterface
	 */
	public function getPassword():string {
		return (string) $this->password;
	}

	public function setPassword(string $password):self {
		$this->password = $password;

		return $this;
	}

	/**
	 * @see UserInterface
	 */
	public function getSalt() {
		// not needed when using the "bcrypt" algorithm in security.yaml
	}

	/**
	 * @see UserInterface
	 */
	public function eraseCredentials() {
		// If you store any temporary, sensitive data on the user, clear it here
		// $this->plainPassword = null;
	}

	public function setUsername(string $username):self {
		$this->username = $username;

		return $this;
	}

	public function getEnabled():?bool {
		return $this->enabled;
	}

	public function setEnabled(?bool $enabled):self {
		$this->enabled = $enabled;

		return $this;
	}

	public function getConfirmationToken():?string {
		return $this->confirmation_token;
	}

	public function setConfirmationToken(?string $confirmation_token):self {
		$this->confirmation_token = $confirmation_token;

		return $this;
	}

	public function getPasswordRequestedAt():?\DateTimeInterface {
		return $this->password_requested_at;
	}

	public function setPasswordRequestedAt(?\DateTimeInterface $password_requested_at):self {
		$this->password_requested_at = $password_requested_at;

		return $this;
	}

	public function getAvatar():?string {
		return $this->avatar;
	}

	public function setAvatar(string $avatar):self {
		$this->avatar = $avatar;

		return $this;
	}

	public function setAvatarFile(File $avatarFile = null) {
		$this->avatarFile = $avatarFile;

		// VERY IMPORTANT:
		// It is required that at least one field changes if you are using Doctrine,
		// otherwise the event listeners won't be called and the file is lost
		if ($avatarFile) {
			// if 'updatedAt' is not defined in your entity, use another property
			// $this->lastUpdate = new \DateTime('now');
		}
	}

	public function getAvatarFile() {
		return $this->avatarFile;
	}

	public function __toString():string {
		return $this->username;
	}

	public function serialize() {
		return serialize([
				$this->id,
				$this->username,
				$this->email,
				$this->password
			]);
	}
	public function unserialize($string) {
		list(
			$this->id,
			$this->username,
			$this->email,
			$this->password,
		) = unserialize($string, ['aloowed_classes' => false]);
	}

	public function getFonction():?fonction {
		return $this->fonction;
	}

	public function setFonction(?fonction $fonction):self {
		$this->fonction = $fonction;

		return $this;
	}
}
